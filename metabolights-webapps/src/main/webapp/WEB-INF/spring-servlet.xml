<?xml  version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:lang="http://www.springframework.org/schema/lang"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:sec="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
 
    <context:component-scan base-package="uk.ac.ebi.metabolights" />
    <context:annotation-config/>

    <mvc:resources mapping="/static/**" location="/WEB-INF/static/" />
    <!--  this makes references to picture and style sheets work -->
    <mvc:annotation-driven/>
    <mvc:default-servlet-handler/>

	<bean id="viewResolver"
	    class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	    <property name="viewClass">
	        <value>
	            org.springframework.web.servlet.view.tiles2.TilesView
	        </value>
	    </property>
	</bean>

    <!-- 
    File uploading
     -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<!--property name="maxUploadSize" value="100000"/-->
	</bean>
   
    
    <!-- 
    To configure Apache Tiles, an entry for bean TilesConfigure has to be made in spring-servlet.xml.
    An input configuration file /WEB-INF/tiles.xml is passed as argument in above bean definition. 
    This file contains the Tiles definition for our web application. 
    -->
    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
	    <property name="definitions">
	        <list>
	            <value>/WEB-INF/tiles.xml</value>
	        </list>
	    </property>
    </bean>
    
	<!-- 
	We will provide a feature where user will be able to select language for the application. This is implemented by using 
	org.springframework.web.servlet.i18n.LocaleChangeInterceptor class. The LocaleChangeInterceptor class will intercept any changes in the locale. 
	These changes are then saved in cookies for future request. org.springframework.web.servlet.i18n.CookieLocaleResolver class will be used to 
	store the locale changes in cookies.
	 -->
	<bean id="messageSource"
	    class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
	    <property name="basename" value="classpath:messages" />
	    <property name="defaultEncoding" value="UTF-8"/>
	</bean>
	<bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
	    <property name="paramName" value="lang" />
	</bean>
	<bean id="localeResolver"
	    class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
	    <property name="defaultLocale" value="en"/>
	</bean>
	<bean id="handlerMapping"
	    class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
	    <property name="interceptors"> <ref bean="localeChangeInterceptor" />
	    </property>
	</bean>

	<!--
	Provider of SpringApplication Context
	Source: http://blog.jdevelop.eu/2008/07/06/access-the-spring-applicationcontext-from-everywhere-in-your-application/
	-->
	<bean id="contextApplicationContextProvider" class="uk.ac.ebi.metabolights.service.ApplicationContextProvider"></bean>

    <!--  register the application properties -->
    <bean id="propertyConfigurer" class="uk.ac.ebi.metabolights.utils.PropertiesUtil">
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
		<property name="locations">
			<list>
                <value>classpath:application.properties</value>
				<value>classpath:hibernate.properties</value>
			</list>
		</property>
	</bean>


   <!-- Callback filter for Frontier template addition -->    
 <!--  
   <bean id="frontierTemplateReferenceLayerFilter" class="uk.ac.ebi.pride.web.util.frontier.FrontierTemplateFilter">
        <property name="jsonConfig" value="classpath:rl_frontier_config.json"/>
   </bean>
 -->
 
    <tx:annotation-driven />
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
 
    <!-- read settings from application.properties file
         NB! only for local testing
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" scope="singleton" destroy-method="close">
		<property name="driverClass" value="${hibernate.connection.driver_class}"/>
		<property name="user" value="${hibernate.connection.username}"/>
		<property name="password" value="${hibernate.connection.password}"/>
		<property name="jdbcUrl" value="${hibernate.connection.url}"/>
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
		<property name="minPoolSize" value="${jdbc.minPoolSize}"/>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
		<property name="autoCommitOnClose" value="${jdbc.autoCommitOnClose}"/>
	</bean>   -->

	<!--bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${hibernate.connection.driver_class}"/>
		<property name="username" value="${hibernate.connection.username}"/>
		<property name="password" value="${hibernate.connection.password}"/>
		<property name="url" value="${hibernate.connection.url}"/>
	</bean-->
	
	<!--For EBI tomcat server deployment  -->
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
      	<property name="jndiName" value="java:comp/env/jdbc/metabolights"/>
      	<property name="resourceRef" value="true" />
	</bean>

    <jee:jndi-lookup id="publicFtpLocation"         jndi-name="java:comp/env/publicFtpLocation" />
    <!--<jee:jndi-lookup id="privateFtpLocation"        jndi-name="java:comp/env/privateFtpLocation" />-->
    <jee:jndi-lookup id="publicFtpStageLocation"    jndi-name="java:comp/env/publicFtpStageLocation" />
    <jee:jndi-lookup id="privateFtpStageLocation"   jndi-name="java:comp/env/privateFtpStageLocation" />
    <jee:jndi-lookup id="urlConfirmNewAccount"      jndi-name="java:comp/env/urlConfirmNewAccount" />
    <jee:jndi-lookup id="urlActivateNewAccount"     jndi-name="java:comp/env/urlActivateNewAccount" />
    <jee:jndi-lookup id="uploadDirectory"           jndi-name="java:comp/env/uploadDirectory" />
    <jee:jndi-lookup id="luceneIndexDirectory"      jndi-name="java:comp/env/luceneIndexDirectory" />
    <jee:jndi-lookup id="luceneIndexDirectoryShort" jndi-name="java:comp/env/luceneIndexDirectoryShort" />
    <jee:jndi-lookup id="ftpServer"                 jndi-name="java:comp/env/ftpServer" />
    <jee:jndi-lookup id="filebase"                  jndi-name="java:comp/env/filebase" />
    <jee:jndi-lookup id="ondemand"                  jndi-name="java:comp/env/ondemand" />
    <jee:jndi-lookup id="headerURL"                 jndi-name="java:comp/env/headerURL" />
    <jee:jndi-lookup id="localHeaderURL"            jndi-name="java:comp/env/localHeaderURL" />
    <jee:jndi-lookup id="footerURL"                 jndi-name="java:comp/env/footerURL" />
    <jee:jndi-lookup id="ebiServiceURL"				jndi-name="java:comp/env/ebiServiceURL"/>
    <jee:jndi-lookup id="EUPMCWebServiceURL"		jndi-name="java:comp/env/EUPMCWebServiceURL"/>
    <jee:jndi-lookup id="mailServer"		        jndi-name="java:comp/env/mailServer"/>
    <jee:jndi-lookup id="EBIHost"		            jndi-name="java:comp/env/EBIHost"/>
    <jee:jndi-lookup id="curationEmailAddress"		jndi-name="java:comp/env/curationEmailAddress"/>


    
    <bean id="modelAndViewFactory" class="uk.ac.ebi.metabolights.webapp.StyleMAVFactory">
        <property name="jsonConfig" value="classpath:rl_frontier_config.json"/>
        <property name="localHeaderURL" value="#{localHeaderURL}"/>
        <property name="headerURL" value="#{headerURL}"/>
        <property name="footerURL" value="#{footerURL}"/>
   	</bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation">
            <value>classpath:hibernate.cfg.xml</value>
        </property>
        <property name="configurationClass">
            <value>org.hibernate.cfg.AnnotationConfiguration</value>
        </property>       
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${jdbc.show_sql}</prop>
                <prop key="hibernate.format_sql">${jdbc.format_sql}</prop>
                <prop key="hibernate.search.default.indexBase">${hibernate.search.default.indexBase}</prop>
            </props>
        </property>
    </bean>

    <!-- 
    The security department
     -->
    <sec:http use-expressions="true" auto-config='true'>
        <sec:intercept-url pattern="/updatepublicreleasedate" access="isAuthenticated()" /> <!-- requires-channel="https" -->
		<sec:intercept-url pattern="/updatestudy" access="isAuthenticated()" />
		<sec:intercept-url pattern="/deleteStudy" access="isAuthenticated()" />
		<sec:intercept-url pattern="/submit" access="isAuthenticated()" />
		<sec:intercept-url pattern="/biisubmit" access="isAuthenticated()" />
		<sec:intercept-url pattern="/submittoqueue" access="isAuthenticated()" />
        <sec:intercept-url pattern="/mysubmissions" access="isAuthenticated()" />
        <sec:intercept-url pattern="/privatefiles" access="isAuthenticated()" />
        <sec:intercept-url pattern="/updateAccount" access="isAuthenticated()" />
		<sec:intercept-url pattern="/reindex" access="hasRole('ROLE_SUPER_USER')" />
        <sec:intercept-url pattern="/reindexall" access="hasRole('ROLE_SUPER_USER')" />
		<sec:intercept-url pattern="/config" access="hasRole('ROLE_SUPER_USER')" />
		<!--<sec:intercept-url pattern="/togglequeue" access="hasRole('ROLE_SUPER_USER')" />-->
        <!--<sec:intercept-url pattern="/queuestatus" access="hasRole('ROLE_SUPER_USER')" />-->
		<sec:intercept-url pattern="/users" access="hasRole('ROLE_SUPER_USER')" />
        <sec:intercept-url pattern="/parameters" access="hasRole('ROLE_SUPER_USER')" />
        <sec:intercept-url pattern="/updateParameters" access="hasRole('ROLE_SUPER_USER')" />
        <sec:intercept-url pattern="/insertParameters" access="hasRole('ROLE_SUPER_USER')" />
        <sec:intercept-url pattern="/addParameters" access="hasRole('ROLE_SUPER_USER')" />
        <sec:intercept-url pattern="/deleteParam" access="hasRole('ROLE_SUPER_USER')" />
        <sec:intercept-url pattern="/clearreflayercache" access="hasRole('ROLE_SUPER_USER')" />
        <sec:intercept-url pattern="/securedredirect" access="isAuthenticated()" />
        <sec:intercept-url pattern="/login" access="permitAll"/>
        <sec:intercept-url pattern="/**" access="permitAll"/>
        <sec:logout logout-success-url="/loggedout" delete-cookies="JSESSIONID" />


        <!--remember-me/-->
        <!-- Uncomment to enable X509 client authentication support <x509 /> -->
        <!--sec:session-management invalid-session-url="/timeout"-->
        <!--<sec:session-management invalid-session-url="/index">-->
            <!--<sec:concurrency-control max-sessions="1" />  &lt;!&ndash;  error-if-maximum-exceeded="true"  &ndash;&gt;-->
        <!--</sec:session-management>-->
        <!--  <form-login /> -->
        <sec:form-login login-page='/login' authentication-failure-url="/login?login_error=1" default-target-url="/login-success"  />
    </sec:http>
    <sec:authentication-manager>
        <sec:authentication-provider ref="isaTabAuthenticationProv" />
    </sec:authentication-manager>
    <bean id="isaTabAuthenticationProv" class="uk.ac.ebi.metabolights.authenticate.IsaTabAuthenticationProvider"/>

    <!-- Email stuff  -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="#{mailServer}"/>
    </bean>
    <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="velocityProperties">
            <value>
                resource.loader=class
                class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
            </value>
        </property>
    </bean>


    <!--
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="465" />
		<property name="username" value="" />
		<property name="password" value="" />

		<property name="javaMailProperties">
		   <props>
	       	      <prop key="mail.smtp.auth">true</prop>
	       	      <prop key="mail.smtp.starttls.enable">true</prop>
	       	   </props>
		</property>
	</bean>
    -->

	<bean id="reminderTemplate" class="org.springframework.mail.SimpleMailMessage">
	  <property name="from" value="${replyTo}"/>
	  <property name="subject" value="Your new MetaboLights password"/>
	</bean>

    <bean id="verifyNewAccountTemplate" class="org.springframework.mail.SimpleMailMessage">
      <property name="from" value="${replyTo}"/>
      <property name="subject" value="Please confirm your account request for MetaboLights"/>
    </bean>

    <bean id="activateAccountTemplate" class="org.springframework.mail.SimpleMailMessage">
      <property name="from" value="${replyTo}"/>
      <property name="subject" value="New MetaboLights account request"/>
      <property name="to"><list><value>${mtblAdminEmailAddress}</value></list> </property>  
    </bean>

    <bean id="accountApprovedTemplate" class="org.springframework.mail.SimpleMailMessage">
      <property name="from" value="${replyTo}"/>
      <property name="cc" ><list><value>#{curationEmailAddress}</value></list></property>
      <property name="subject" value="Your account for MetaboLights is now active"/>
    </bean>

    <bean id="studySoonLiveTemplate" class="org.springframework.mail.SimpleMailMessage">
        <property name="from" value="${replyTo}"/>
        <property name="subject" value="Your MetaboLights study will go public soon"/>
    </bean>
    
    <bean id="contactUsTemplate" class="org.springframework.mail.SimpleMailMessage">
      <property name="subject" value="MetaboLights Website General Request"/>
      <property name="to"><list><value>${mtblAdminEmailAddress}</value></list></property>  
    </bean>

    <bean id="queueManager" class="uk.ac.ebi.metabolights.model.queue.SubmissionQueueManager"/>
</beans>